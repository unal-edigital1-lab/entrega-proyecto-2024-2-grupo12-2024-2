# VGA
module snake_game ( input wire clk25,       // Reloj de 25 MHz input wire reset,       // Reset global input wire up, left, down, right, // Botones de dirección output reg hsync, vsync, // Señales VGA output reg [2:0] rgb     // Color RGB );

// Parámetros VGA (640x480 a 60Hz)
parameter H_VISIBLE_AREA = 640, V_VISIBLE_AREA = 480;
parameter GRID_SIZE = 10; // Tamaño de cada celda de la cuadrícula

// Contadores VGA
reg [9:0] h_count = 0, v_count = 0;

// Variables del juego
reg [6:0] snake_x = 32, snake_y = 24; // Posición inicial de la serpiente (en celdas)
reg [6:0] food_x = 10, food_y = 15; // Posición de la comida
reg [1:0] direction = 2'b00; // Dirección (00 = derecha, 01 = izquierda, 10 = arriba, 11 = abajo)

// Lógica de actualización del juego
always @(posedge clk25 or posedge reset) begin
    if (reset) begin
        snake_x <= 32;
        snake_y <= 24;
        food_x <= 10;
        food_y <= 15;
        direction <= 2'b00;
    end else begin
        // Movimiento basado en botones
        if (left)  direction <= 2'b01;
        if (right) direction <= 2'b00;
        if (up)    direction <= 2'b10;
        if (down)  direction <= 2'b11;
        
        // Actualizar posición de la serpiente
        case (direction)
            2'b00: snake_x <= snake_x + 1; // Derecha
            2'b01: snake_x <= snake_x - 1; // Izquierda
            2'b10: snake_y <= snake_y - 1; // Arriba
            2'b11: snake_y <= snake_y + 1; // Abajo
        endcase
        
        // Colisión con la comida
        if (snake_x == food_x && snake_y == food_y) begin
            food_x <= (food_x + 17) % 64; // Nueva posición aleatoria (mod 64 para ajustarse a la grilla)
            food_y <= (food_y + 23) % 48;
        end
    end
end

// Generación de la señal VGA
always @(posedge clk25) begin
    if (h_count < H_VISIBLE_AREA && v_count < V_VISIBLE_AREA) begin
        if ((h_count / GRID_SIZE == snake_x) && (v_count / GRID_SIZE == snake_y))
            rgb <= 3'b010; // Serpiente (verde)
        else if ((h_count / GRID_SIZE == food_x) && (v_count / GRID_SIZE == food_y))
            rgb <= 3'b100; // Comida (roja)
        else
            rgb <= 3'b000; // Fondo (negro)
    end else begin
        rgb <= 3'b000;
    end
    
    // Contadores VGA
    if (h_count < 799)
        h_count <= h_count + 1;
    else begin
        h_count <= 0;
        if (v_count < 524)
            v_count <= v_count + 1;
        else
            v_count <= 0;
    end
    
    // Generación de señales de sincronización
    hsync <= (h_count >= 656 && h_count < 752) ? 0 : 1;
    vsync <= (v_count >= 490 && v_count < 492) ? 0 : 1;
end

endmodule
